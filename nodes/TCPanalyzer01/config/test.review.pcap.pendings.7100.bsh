//# Revised:   2021.04.28                               
//#            [ RuleBased-Security-Lab example ]
//#------------------------------------------------


import jade.content.*;
import jade.content.onto.basic.Action;

import jade.content.onto.BasicOntology;
import jade.content.onto.BeanOntology;
import jade.content.onto.BeanOntologyException;
import jade.content.onto.Ontology;
import jade.content.onto.OntologyUtils;

import jade.content.ContentManager;
import jade.content.lang.Codec;
import jade.content.lang.Codec.CodecException;
import jade.content.lang.sl.SLCodec;
import jade.content.onto.OntologyException;
import jade.content.onto.basic.Action;

import jade.core.CaseInsensitiveString;

import jade.domain.FIPANames;

import jade.lang.acl.ACLMessage;
import jade.lang.acl.MessageTemplate;

import jade.util.leap.Serializable;
import jade.util.leap.ArrayList;

import jade.core.*;
import jade.core.behaviours.*;
import jade.core.behaviours.Behaviour;
import jade.core.behaviours.SimpleBehaviour;
import jade.core.behaviours.CyclicBehaviour;

import com.dpsframework.domain;

import net.sf.clipsrules.jni.Environment;
import net.sf.clipsrules.jni.Router;
import com.dpsframework.core.engines.*;
import java.util.Date;
import java.lang.System.*;





//Begin of test function:----------------------------------------------------------

/**
* Banners utilities for getting results of test.xxxxxxx.
* 
* Big-Banner: phaseBanner( "Long text" );
* Next step : question   = "Visibility of Action Class";
* Answer    : answer     = (  evaluation ) ?  AFIRMATIVO : NEGATIVO ;
* Results   : resultBanner( question, answer );
* Next step : question   = "Visibility of Action Class";
* 
* @author Francisco Jose Aguayo (UniLeon)
* 
*/


// ---------------------------------------------------------------------------------
// (First-Phase) Build a message and send it to internal Engine through agent-queue. 
// ---------------------------------------------------------------------------------
	phaseBanner( "REVIEW .PCAP Files pendings - Tests." );

// Next step..................................................:
	question   = "Visibility of Action Class"; 
	answer = (  getClass( "Action" ).getName().equals("jade.content.onto.basic.Action") ) ?  AFIRMATIVO : NEGATIVO ;
	resultBanner( question, answer );


	
	
	// Next step..................................................:
	question   = "List of trusted Agents"; 


	String streamAgentsTrusted = myNode.nodeName + " (Itself)," 
		                + myNode.sFrameworkNodeSerie + "," 
		                + myNode.sNameOfTicketBoard + " (Ticket's Service)";
	
	String[] values    = streamAgentsTrusted.split(",");  
	String itSelfAgent = values[0];
	
	answer = ( streamAgentsTrusted != null  ) ?  AFIRMATIVO : NEGATIVO ;
	resultBanner( question, answer );
	
	println(" Lista de agentes: " + streamAgentsTrusted );
	println(" Este agente: : " + itSelfAgent );
	println(" Este agente filtrado: " + itSelfAgent.split(" ")[0] );
	println();
	
	
	
	
	
	// Next step..................................................:
	question   = "Building message (1) for internal engine"; 

	AID engineAID       = new AID( "Engine" + Integer.toHexString( innEngine.hashCode() ) + "@" + myNode.nodeName , AID.ISGUID ) ;
	ACLMessage msg1001  = new ACLMessage(ACLMessage.QUERY_REF);
		msg1001.addReceiver(  engineAID  );
		msg1001.addUserDefinedParameter("X-psTest", "msg1001");
		msg1001.setEncoding("fipa.acl.rep.string.std");
		msg1001.setEnvelope(new Envelope());
		msg1001.getEnvelope().setComments("(facts 0 7 )" );
		msg1001.setLanguage( FIPANames.ContentLanguage.FIPA_SL );
		msg1001.setOntology( ProblemSolversOntology.getInstance().getName() );
		msg1001.setProtocol("fipa-request");
		msg1001.setSender( myAgent.getAID() );
	
	answer = ( msg1001 != null  ) ?  AFIRMATIVO : NEGATIVO ;
	resultBanner( question, answer );
	
	question   = "Dump of message msg001 complete:"; 
	answer     = ( msg1001 != null  ) ?  AFIRMATIVO : NEGATIVO ;
	resultBanner( question, answer );
	println( msg1001 );
	println();




	// Next step..................................................:
	question   = "Making Action-Process and inserts it in messages"; 

	listP = new jade.util.leap.ArrayList();
		listP .add( 0, "LOAD_FILE"      );
		listP .add( 1, "grid4x4-p17.clp");   // I hope that file exists!
	
	Process theProcess = new Process();
		theProcess .setContent (  null   );
		theProcess .setLanguage( "CLIPS" );
		theProcess .setMethod  (  listP  );

	Action action = new Action( engineAID , theProcess );
	myAgent .getContentManager() .fillContent( msg1001, action );
		
	answer = ( msg1001.getContent() != null  ) ?  AFIRMATIVO : NEGATIVO ;
	resultBanner( question, answer );

	question   = "Dump of message's content field:"; 
	answer = ( msg1001.getContent() != null  ) ?  AFIRMATIVO : NEGATIVO ;
	resultBanner( question, answer );
	println( msg1001.getContent() );
	println();

	question   = "Dump of message msg001 complete:"; 
	answer = ( msg1001.getContent() != null  ) ?  AFIRMATIVO : NEGATIVO ;
	resultBanner( question, answer );
	println( msg1001 );
	println();








// ---------------------------------------------------------------------------------
// (Next-Phase) Build a second message to internal Engine (easy for processing).
// ---------------------------------------------------------------------------------

	
	println(4);
	phaseBanner( "Build a second message to internal Engine (easy for processing)." );

	// Next step..................................................:
	question   = "Building message (2) for internal engine"; 



	//AID engineAID = new AID( "Self_Engine" + Integer.toHexString( innEngine.hashCode() ) , AID.ISLOCALNAME ) ;
	AID engineAID = new AID( "Engine" + Integer.toHexString( innEngine.hashCode() ) + "@" + myNode.nodeName , AID.ISGUID ) ;
	
	ACLMessage msg2001 = new ACLMessage(ACLMessage.REQUEST);
	
		msg2001.addReceiver(  engineAID  );
		msg2001.addUserDefinedParameter("X-psTest", "msg2001");
		msg2001.setEncoding("fipa.acl.rep.string.std");
		msg2001.setEnvelope(new Envelope());
		msg2001.getEnvelope().setComments("(facts 0 7 )" );
		
		// Tratar de tomar de un canuto de stream hacia texto el valor de un archivo
		// y meterlo en el valor del comments de envelope
		// Luego, al ver que se trata de una cadena de Envelope, sacarla como
		// un Stream y ponerla en el lugar del archivo esperado por LOAD_FILE.
		// Una virguería más.
		
		msg2001.setLanguage( FIPANames.ContentLanguage.FIPA_SL );
		msg2001.setOntology( ProblemSolversOntology.getInstance().getName() );
		msg2001.setProtocol("fipa-request");
		msg2001.setSender( myAgent.getAID() );
	
	answer = ( msg2001 != null  ) ?  AFIRMATIVO : NEGATIVO ;
	resultBanner( question, answer );

	question   = "Dump of message's content field:"; 
	answer = ( msg2001 != null  ) ?  AFIRMATIVO : NEGATIVO ;
	resultBanner( question, answer );
	println( msg2001 );
	println();

	
	
	// Next step..................................................:
	question   = "Making Process and inserts it on message 2"; 
	
	listP = new jade.util.leap.ArrayList();
		listP .add( 0, "LOAD_FILE"           );
		listP .add( 1, "Envelope_Comments");   // Stream-String-Stream-Load
	
	Process theProcess = new Process();
		theProcess .setContent (  null   );
		theProcess .setLanguage( "CLIPS" );
		theProcess .setMethod  (  listP  );
	
	Action action = new Action( engineAID , theProcess );
	myAgent .getContentManager() .fillContent( msg2001, action );
		
	answer = ( msg2001.getContent() != null  ) ?  AFIRMATIVO : NEGATIVO ;
	resultBanner( question, answer );


	question   = "Dump of message2's content field:"; 
	answer = ( msg2001.getContent() != null  ) ?  AFIRMATIVO : NEGATIVO ;
	resultBanner( question, answer );
	println( msg2001.getContent() );
	println();

	question   = "Test Envolope :comments field contents";
	answer = ( msg2001.getEnvelope().getComments() != null  ) ?  AFIRMATIVO : NEGATIVO ;
	resultBanner( question, answer );
	println(  msg2001.getEnvelope().getComments() );
	println();

