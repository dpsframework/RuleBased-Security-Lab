//# Revised:   2021.04.28                               
//#            [ RuleBased-Security-Lab example ]
//#------------------------------------------------


import com.dpsframework.core.*;
import com.dpsframework.core.engines.*;
import com.dpsframework.core.behaviour.*;
import com.dpsframework.util.*;
import com.dpsframework.domain.*;
import com.dpsframework.PsNodeAgent;
import com.dpsframework.PsNodeAgentGui;
import com.dpsframework.*;
import com.dpsframework.core.behaviour.BhConstants;
import com.dpsframework.util.PsNodeSettings;
import com.dpsframework.util.PsServices;
import com.dpsframework.util.PsConstants;
import com.dpsframework.domain.PsoNames;


import jade.content.lang.Codec.CodecException;
import jade.content.onto.OntologyException;
import jade.content.onto.basic.Action;
import jade.core.AID;
import jade.core.behaviours.Behaviour;
import jade.lang.acl.ACLMessage;
import jade.tools.gui.ACLPanel;
import jade.tools.gui.ACLTracePanel;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Component;
import java.awt.EventQueue;
import java.awt.FlowLayout;
import java.awt.Font;
import java.awt.Insets;
import java.awt.Rectangle;
import java.awt.Toolkit;
import java.awt.Window;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Objects;

import javax.swing.AbstractListModel;
import javax.swing.Box;
import javax.swing.BoxLayout;
import javax.swing.DefaultComboBoxModel;
import javax.swing.DefaultListModel;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JSplitPane;
import javax.swing.JTabbedPane;
import javax.swing.JTextField;
import javax.swing.JTextPane;
import javax.swing.ListSelectionModel;
import javax.swing.SwingUtilities;
import javax.swing.UIManager;
import javax.swing.WindowConstants;
import javax.swing.border.BevelBorder;
import javax.swing.border.LineBorder;
import javax.swing.border.SoftBevelBorder;
import javax.swing.border.TitledBorder;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.text.AttributeSet;
import javax.swing.text.SimpleAttributeSet;
import javax.swing.text.StyleConstants;
import javax.swing.text.StyleContext;

import org.fife.ui.autocomplete.AutoCompletion;
import org.fife.ui.autocomplete.BasicCompletion;
import org.fife.ui.autocomplete.CompletionProvider;
import org.fife.ui.autocomplete.DefaultCompletionProvider;
import org.fife.ui.autocomplete.ShorthandCompletion;
import org.fife.ui.rsyntaxtextarea.RSyntaxTextArea;
import org.fife.ui.rsyntaxtextarea.SyntaxConstants;
import org.fife.ui.rtextarea.RTextScrollPane;

import bsh.EvalError;
import com.dpsframework.core.behaviour.N2NREInitiator;
import com.dpsframework.domain.Repl;




// /////////////////////////////////////////////
// Technique: Test if restart agent it was requested by method: init (0);
if (myNode .currentExecLevel >  0 	&&  
	myNode .currentExecLevel != 6  	) {

	outLogger(new Object[]{"level.00 ", myAgent.getLocalName(), 
			"It goes to exit from level ["+ myNode .currentExecLevel + "] now!" });
	
	exit();  // It is really an exit with final Agent-life!	
}




// /////////////////////////////////////////////
// Restart from Level:6
myAgent .myNode().initializeNode();
myAgent .myNode().refresh();



// /////////////////////////////////////////////
// Technique: Some BeanShell functions renamed. 
public void clear()   { bsh.console.clearText(); }
public void desktop() {  }
 

// /////////////////////////////////////////////
// Technique: Level-0. A new Prompt to user JADE-Shell
if ( myAgent .getLocalName() .equals( PsConstants.AgentINSTANCE.stage_node )  ) {
	
	String getBshPrompt() {
		sz = jconsole.getFont().size;
		// Advanced used => advanced not void (full-path) so; (advanced = 1, unset("advanced");)	
	    if(  advanced == void  ){
			myAgent.jadeConsole().print( "\n[" + 
					myAgent.getLocalName() + "]:/" + pathToFile( bsh.cwd ).getName() + "/", 
					new Font("Monaco", Font.PLAIN, sz), 
					new Color( 255,16,0 ) );	    	
	    } else {
			myAgent.jadeConsole().print( ("\n[ "+myAgent.getName()+" ]"
					+"://" + bsh.cwd  + "/\n\n").replace( '\\', '/' ), 
					new Font("Monaco", Font.PLAIN, sz), 
					new Color( 196,0,0 ) );	    	
	    }
		return "# > ";
	}
	
} else {
	// /////////////////////////////////////////////
	// Technique: Level-0. Prompt to psNodeAgents inside Test-Environment
	String getBshPrompt(){
		sz = jconsole.getFont().size;
		myAgent .jadeConsole() .print( "\n[" 
		+myAgent.getLocalName()+"]:/"+pathToFile( bsh.cwd ) .getName() +"/", 
		  new Font("Monaco", Font.PLAIN, sz), 
		  new Color( 0,0,196 )  
		);
	    return "$ > ";
	}
}


// /////////////////////////////////////////////
// Technique: Load Framework global help & utils.
if ( pathToFile( frameworkConfigPath + "framework.methods.bsh" ).exists() ){
	source(      frameworkConfigPath + "framework.methods.bsh" );
}
if ( pathToFile( nodeConfigPath + "node.methods.bsh" ).exists() ){
	source(      nodeConfigPath + "node.methods.bsh" );
}



// /////////////////////////////////////////////
// Technique: info about myBOB & others util commands
outLogger(new Object[]{"level.00 ", myAgent.getLocalName(), 
		"Running Script level.00.bsh inside of this Node-Agent.",
		myBOB() .perspective()  });



// /////////////////////////////////////////////
// Technique: change root.path of BeanShell Interpreter
public void cdhome(){
	cd(nodeConfigPath);
}



// /////////////////////////////////////////////
// Technique: Level 0 --> setting the startup Level
myNode .currentExecLevel = 0;
runLevels( myBOB,   myNode.currentExecLevel );



// /////////////////////////////////////////////
// Technique: Level 0. started from bare init!
outLogger(new Object[]{"level.00 ", myAgent.getLocalName(), 
		"Level", "["+ myNode .currentExecLevel + "]", "has finished loading."});

// End-of-Level-00 config file.
