//# Revised:   2021.04.28                               
//#            [ RuleBased-Security-Lab example ]
//#------------------------------------------------


//# New systemct loader services function. 
//# /////////////////////////////////////////////
if ( pathToFile( frameworkConfigPath + "systemctl.agents.bsh" ).exists() ){
	source(      frameworkConfigPath + "systemctl.agents.bsh" );
}








//Local-Test functions
//-----------------------------------------------------------------
//Revised:   2021.04.28                               
//[ Snort-Agents-IoT example ]
//
String AFIRMATIVO  = "Correct !";
String NEGATIVO    = "Oops____!";
String AFFIRMATIVE = "Correct !";
String NEGATIVE    = "Oops____!";
int    LINE_LENGTH = 80;

String answer     = (true) ? AFFIRMATIVE : NEGATIVE ;
String test       = "";

String formatQ(String t){
	int l = LINE_LENGTH - t.length() - 11;
	if (l > 0 ) {
		return  t + new String( new char[ l ] ).replace( '\u0000', '.' ) + ": ";
	} else {
	return t + ": ";
	}
}

String formatQ(int l, char c){
	if (l > 0 ) {
		return  ( new String( new char[ l ] ).replace( '\u0000', c )  );
	}
	return "";
}

void println(Object o ){ jconsole.print( o ); jconsole.print("\n"); }
void println(){ 	jconsole.print("\n"); }
void println(int r){for( int i=1; i<r ; ++i) { jconsole.print("\n"); } }

int  acum  = 0; 
int  phase = 0;

void phaseBanner(String p) {
	acum = 0;
	++phase;
	println( formatQ( LINE_LENGTH , '-' ) );
	println( "(" + phase + ") " + p );
	println( formatQ( LINE_LENGTH , '-' ) );
}
void resultBanner(String q, String a) {
	++acum;
	String ntest = "Test " +  phase + ".00"+ acum + ": " + q ;
	println( formatQ( ntest  ) + a );
	println( formatQ( 11 , '-' ) );
}

///////////////////////////////////////////////
//Technique: Some monitors Functions 
Map testArea = new HashMap();
Map myTest   = new HashMap();



///////////////////////////////////////////////
//Technique: Overload test() with: test(Object) and test(int)
void test(int h) {
	test_MENU  = "menu";   test_MENU_CODE  = 99;
	
//	testArea.put(1000, "----------------------                ----------");
	testArea.put(7000, "----------------------Open-Transform .PCAP files");
	  myTest.put("pcap.transform"       ,  7200   );
	  myTest.put("pcap.open"            ,  7100   );

	
	

	

	


	switch (h) {
		case test_MENU_CODE:
			print( "--------  ------------------------------------------------");
			print( "Test.ID   Description                              testID#");
			print( "--------  ------------------------------------------------");
			for( a : testArea.keySet() ){
				print ("    : >>  " + testArea.get(a) ); 
				for( e : myTest.entrySet() ){
					if ( e.getValue() >= a && e.getValue() < (a + 1000) ){
						tail = formatQ(44 - e.getKey().length(), ' '); 
						print( "          "+e.getKey()    + tail + e.getValue() );
					}
				}
			}
			print( "--------  ------------------------------------------------");
			println("\nLaunch test with:   test( testID# );");
			break;
			
		case 7000: case 6000: case 5000: case 4000: 
			print( "--------------------------------------------     ---------");
			print( "Script file associated                           script.ID");
			print( "--------------------------------------------     ---------");
			for( e : myTest.entrySet() ){
				if ( e.getValue() >= h && e.getValue() < (h + 1000) ){
					tail = formatQ(54 - e.getKey().length(), ' '); 
					print( e.getKey()    + tail + e.getValue() );
				}
			}
			println("\nLaunch with:   test( testID# );");
			break;
			
		default:
			for( e : myTest.entrySet() ){
				if ( e.getValue() == h  ){
					print("We proceed to open the test: " + e.getValue() );
					nameOfTest = "test." + e.getValue() + "." + e.getKey() + ".java";
					print("                       Name: " + nameOfTest  + "\n" );
					if ( ! pathToFile(nameOfTest).exists() ) {
				       print("Sorry, file not found.\n");
						break;
					}
					source( nameOfTest  );
				}
			}

			print( "Bye!" );
			break;
			
		}
}

///////////////////////////////////////////////
//Technique: Overload test() with: test(Object) and test(int)
void test() { 
	test(99); 
}

void test(Object o){ 	
	if ( o == void ) {	
		test(99);    
	} else {
		test(99);
	}
}




//# Technique: Imports (the order is really important). 
//# /////////////////////////////////////////////
import java.io.IOException;
import java.text.MessageFormat;
import java.io.BufferedReader;
import java.io.DataInputStream;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FilterInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.Reader;
import java.text.MessageFormat;
import java.util.ArrayList;



//Special for changing GUI. (Maniac Hackers only).
//-------------------------------------------------------
import javax.swing.plaf.basic.BasicTabbedPaneUI.*;
import javax.swing.plaf.basic.BasicTabbedPaneUI.FocusHandler;
import javax.swing.plaf.metal.MetalTabbedPaneUI.TabbedPaneLayout;
import javax.swing.JComponent.AccessibleJComponent;
import javax.swing.JLayeredPane.*;
import javax.swing.JComponent.*;
import javax.swing.RepaintManager.*;
import java.security.AccessController;
import java.awt.event.InvocationEvent;
import java.awt.EventQueue;

import com.sun.java.swing.*;
import com.sun.java.swing.plaf.*;
import com.sun.java.swing.plaf.motif.*;
import com.sun.java.swing.plaf.motif.MotifLookAndFeel;
import com.sun.java.swing.plaf.motif.icons.*;
import com.sun.java.swing.plaf.motif.resources.*;
import com.sun.java.swing.plaf.motif.MotifLookAndFeel;
import com.sun.java.swing.plaf.nimbus.*;
import com.sun.java.swing.plaf.nimbus.NimbusLookAndFeel;
import com.sun.java.swing.plaf.windows.*;
import com.sun.java.swing.plaf.windows.icons.*;
import com.sun.java.swing.plaf.windows.resources.*;
import com.sun.java.swing.plaf.windows.WindowsLookAndFeel;
//--------------------------------------------------------
//end of special for changing GUI
import jade.core.Agent;
import jade.util.Logger;
import jade.core.behaviours.*; 

import jade.lang.acl.*;
import jade.content.lang.Codec;
import jade.content.lang.sl.SLCodec;
import jade.content.onto.basic.*;;
import jade.domain.FIPAAgentManagement.*;;
import jade.domain.DFGUIManagement.*;
import jade.domain.JADEAgentManagement.*;
import jade.domain.DFService;
import jade.domain.FIPAException;
import jade.proto.*;
import jade.proto.AchieveREInitiator;
import jade.proto.AchieveREResponder;
import jade.proto.SubscriptionInitiator;
import jade.proto.states.*;

import jade.content.Concept;
import jade.content.onto.basic.Action;
import jade.content.onto.basic.Done;
import jade.domain.FIPAException;
import jade.domain.RequestManagementBehaviour;
import jade.domain.FIPAAgentManagement.UnsupportedFunction;
import jade.domain.JADEAgentManagement.ShowGui;
import jade.lang.acl.ACLMessage;
import jade.lang.acl.MessageTemplate;
import jade.security.JADESecurityException;


import jade.core.messaging.*;;
import jade.core.messaging.TopicManagementService;
import jade.core.AID;
import jade.core.behaviours.ThreadedBehaviourFactory;

import jade.domain.FIPANames;
import jade.domain.FIPAAgentManagement.*;

import jade.content.AgentAction;
import jade.content.lang.Codec;
import jade.content.lang.Codec.CodecException;

import jade.content.lang.sl.*;
import jade.content.lang.sl.SLCodec;

import jade.lang.acl.*;

import jade.content.onto.*;
import jade.content.onto.basic.*;

import jade.content.*;
import jade.content.onto.OntologyException;
import jade.content.onto.basic.Action;

import jade.content.onto.BasicOntology;
import jade.content.onto.BeanOntology;
import jade.content.onto.BeanOntologyException;
import jade.content.onto.Ontology;
import jade.content.onto.OntologyUtils;

import jade.content.ContentManager;
import jade.content.lang.Codec;
import jade.content.lang.Codec.CodecException;
import jade.content.lang.sl.SLCodec;
import jade.content.onto.OntologyException;
import jade.content.onto.basic.Action;
import jade.core.CaseInsensitiveString;
import jade.domain.FIPANames;
import jade.lang.acl.ACLMessage;
import jade.lang.acl.MessageTemplate;
import jade.util.leap.Serializable;

import bsh.Interpreter;
import bsh.EvalError;


import com.dpsframework.*;
import com.dpsframework.domain.*;
import com.dpsframework.util.*;
import com.dpsframework.core.engines.*;
import com.dpsframework.core.behaviour.*;



import java.awt.*;
import java.security.*;
import java.awt.EventQueue;
import javax.swing.text.*;
import javax.swing.plaf.*;
import javax.swing.text.BoxView;

//import net.sf.clipsrules.jni.Router;
//import jess.*;

import java.awt.*;
import java.awt.event.*;
import java.util.*;
import javax.swing.*;
import javax.swing.Timer;
import java.util.Date;
import java.lang.System.*;
import java.util.regex.*;

import java.io.File;
import java.io.IOException;
import java.text.MessageFormat;
import jade.util.leap.HashMap;

import java.util.regex.Pattern;
import java.util.regex.Matcher;
import java.util.regex.PatternSyntaxException;

import jess.*;
import jess.xml.*;
import jess.tools.*;
import jess.jsr94.*;
import jess.awt.*;

import java.util.HashMap;
import java.util.Arrays;
import java.util.HashMap;
import java.lang.NullPointerException;



internalShellCLIPS  = null;
internalRouterCLIPS = null; 
internalShellJESS   = null;
internalRouterJESS  = null; 
jspShEng            = new JScrollPane();
myShell             = null;

