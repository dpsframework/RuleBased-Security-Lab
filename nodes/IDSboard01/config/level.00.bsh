//# Revised:   2021.04.28                               
//#            [ RuleBased-Security-Lab example ]
//#

import com.dpsframework.core.*;
import com.dpsframework.core.engines.*;
import com.dpsframework.core.behaviour.*;
import com.dpsframework.util.*;
import com.dpsframework.domain.*;
import com.dpsframework.PsNodeAgent;
import com.dpsframework.PsNodeAgentGui;
import com.dpsframework.*;
import com.dpsframework.core.behaviour.BhConstants;
import com.dpsframework.util.PsNodeSettings;
import com.dpsframework.util.PsServices;
import com.dpsframework.util.PsConstants;
import com.dpsframework.domain.PsoNames;
import com.dpsframework.core.engines.RBConstants;

import jade.content.lang.Codec;
import jade.content.lang.sl.SLCodec;
import jade.core.AID;
import jade.core.Agent;
import jade.core.behaviours.Behaviour;
import jade.core.behaviours.OneShotBehaviour;
import jade.core.behaviours.TickerBehaviour;
import jade.domain.DFService;
import jade.domain.FIPAException;
import jade.domain.FIPANames;
import jade.domain.DFGUIManagement.DFAppletOntology;
import jade.domain.FIPAAgentManagement.DFAgentDescription;
import jade.domain.FIPAAgentManagement.FIPAManagementOntology;
import jade.domain.FIPAAgentManagement.FailureException;
import jade.domain.FIPAAgentManagement.ServiceDescription;
import jade.domain.JADEAgentManagement.JADEManagementOntology;
import jade.domain.JADEAgentManagement.ShowGui;
import jade.lang.acl.ACLMessage;
import jade.util.Logger;
import jade.util.leap.HashMap;

import java.awt.Color;
import java.awt.Font;
import java.io.BufferedReader;
import java.io.DataInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStreamReader;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.text.MessageFormat;

import javax.swing.ImageIcon;
import javax.swing.SwingUtilities;

import bsh.EvalError;
import bsh.Interpreter;
import bsh.util.NameCompletionTable;

import com.dpsframework.core.behaviour.BhConstants;
import com.dpsframework.domain.ProblemSolversOntology;
import com.dpsframework.util.JadeConsole;
import com.dpsframework.util.PsConstants;
import com.dpsframework.util.PsServices;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.sql.Statement;

//# /////////////////////////////////////////////
//# Technique: Testing if it level was requested by user a restart
if ( myNode .currentExecLevel > 0 &&  myNode .currentExecLevel != 6 ) {		
	outLogger(new Object[]{"level.00 ",	myAgent .getLocalName(), "It goes to exit from level", 
			     "["+ myNode .currentExecLevel + "]", "now!"});	
	exit();  // Really, it's a true EXIT!	
}



//# /////////////////////////////////////////////
//# Restart from Level:6
myAgent .myNode().initializeNode();
myAgent .myNode().refresh();



//# /////////////////////////////////////////////
//# Technique: Some shell functions renamed
public void clear()   { bsh.console.clearText(); }
public void desktop() {  }






//# /////////////////////////////////////////////
//# Technique: Load Framework global help & utils.
if ( pathToFile( frameworkConfigPath + "framework.methods.bsh" ).exists() ){
	source(      frameworkConfigPath + "framework.methods.bsh" );
}
if ( pathToFile( nodeConfigPath + "board.methods.bsh" ).exists() ){
	source(      nodeConfigPath + "board.methods.bsh" );
}


//# /////////////////////////////////////////////
//# Technique: Cosmetic Fonts for Mac-Developers.
if (  PsServices.getNativePath().equals("mac")   ) {
	sz = jconsole.getFont().size;
	jconsole.setFont(new Font( "Monaco", Font.PLAIN, sz));
}




//# /////////////////////////////////////////////
//# Technique: Prompt of BeanShell inside JADE Agent
String getBshPrompt() {
	sz = jconsole.getFont().size;
		
	// Advanced used => advanced not void (full-path) so; (advanced = 1, unset("advanced");)	
	if(  advanced == void  ){
		myAgent.jadeConsole().print( "\n["
	            +myAgent.getLocalName()+"]:/" + pathToFile( bsh.cwd ).getName() + "/", 
		new Font("Monaco", Font.PLAIN, sz), 
		new Color(  196,0,0 ) );	    	
	} else {
		myAgent.jadeConsole().print(  "\n[ids-board]://" 
				+myAgent.getLocalName()+"/"+pathToFile( bsh.cwd ) .getName() +"/", 
				  new Font("Monaco", Font.PLAIN, sz), 
				  new Color( 196,0,0  )  
				);
	}	
	return "# > ";
}





//# /////////////////////////////////////////////
//# Technique: change root.path of BeanShell Interpreter
public void cdhome(){
	cd(myNode .nodeConfigPath);
}




//# /////////////////////////////////////////////
//# Technique: info about myBOB & others util commands
outLogger(new Object[]{"level.00 ", myAgent.getLocalName(), 
		"Running Script level.00.bsh inside of this Agent.",
		myBOB() .perspective()  });



//# /////////////////////////////////////////////
//# Technique: Level 0 --> setting in startup-Level
myNode .currentExecLevel = 0;
runLevels( myBOB,   myNode .currentExecLevel );


//# /////////////////////////////////////////////
//# Technique: Level 0. started from bare init!
outLogger(new Object[]{"level.00 ",	myAgent .getLocalName(), 
	"Level", 
	"["+ myNode .currentExecLevel + "]", 
	"has finished loading." });



//# End-of-Level-00 config file.